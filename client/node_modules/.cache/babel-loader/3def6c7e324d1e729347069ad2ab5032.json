{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kristinabressler/Documents/IronHack/Rewards-Program/rewards-program/src/components/purchaseMonth.js\";\nimport React, { Component } from 'react';\nimport RewardsCard from \"./RewardsCard\";\nexport default class purchaseMonth extends Component {\n  constructor(props) {\n    super(props);\n\n    this.calculateRewards = purchased => {\n      let totalRewards = 0; // let totalRewards2 = 0;\n\n      if (50 < purchased && purchased < 100) {\n        let getRewards1 = purchased - 50;\n        totalRewards += getRewards1;\n      }\n\n      if (50 < purchased && purchased > 100) {\n        let getRewards1 = 50;\n        totalRewards += getRewards1;\n      }\n\n      if (purchased > 100) {\n        let getRewards2 = (purchased - 100) * 2;\n        totalRewards += getRewards2;\n      }\n\n      console.log(\"totalRewards1\", totalRewards1);\n      console.log(\"totalRewards2\", totalRewards2);\n      return totalRewards1;\n    };\n\n    this.state = {\n      transitionArr: this.props.transitions,\n      monthListSum: [],\n      totalRewardsMonth: 0\n    };\n  }\n\n  // renderRewardTransArr = () => {\n  //   // const total = transitions.reduce((sum, {purchased}) => {\n  //   //   let reward = calculateRewards(purchased);\n  //   //   return sum + reward;\n  //   // }, 0);\n  //   let newtransArr = [...this.state.transitionArr];\n  //      let ntranstArr = newtransArr.map((trans, index) => {\n  //       return {...trans, rewardpoints: this.calculateRewards(trans.purchased)}\n  //      })\n  //   // this.setState(prevState => ({\n  //   //   transitionArr: [...prevState.transitionArr, newtransArr]\n  //   // }));\n  //   this.setState({\n  //     transitionArr: ntranstArr\n  //   });\n  //   console.log(\"new Transition Arr2\", ntranstArr);\n  // }\n  render() {\n    const transitionList = this.state.transitionArr; // renderRewardTransArr = () => {\n    // const total = transitions.reduce((sum, {purchased}) => {\n    //   let reward = calculateRewards(purchased);\n    //   return sum + reward;\n    // }, 0);\n    // calculateRewards = (purchased) => {\n    //   let purchasedT = purchased;\n    //   let totalRewards = 0\n    //   if(50 < purchasedT && purchasedT < 100) {\n    //     let getRewards1 = purchasedT - 50;\n    //     totalRewards += getRewards1;\n    //   }\n    //   if(purchasedT > 100) {\n    //     let getRewards2 = (purchasedT - 100) * 2;\n    //     totalRewards += getRewards2;\n    //   }\n    //   console.log(\"totalRewards\", totalRewards);\n    //   return totalRewards;\n    // }\n\n    let newtransArr = [...this.state.transitionArr];\n    let ntranstArr = newtransArr.map(trans => {\n      return { ...trans,\n        rewardpoints: this.calculateRewards(trans.purchase)\n      };\n    }); // this.setState(prevState => ({\n    //   transitionArr: [...prevState.transitionArr, newtransArr]\n    // }));\n    // this.setState({\n    //   transitionArr: ntranstArr\n    // });\n\n    console.log(\"new Transition Arr2\", ntranstArr); // }\n    // {renderRewardTransArr()}\n\n    console.log(\"new Transition Arr\", this.state.transitionArr);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.props.month\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: transitionList.map(eachTransition => /*#__PURE__*/_createElement(RewardsCard, { ...eachTransition,\n          key: eachTransition.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          },\n          __self: this\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/kristinabressler/Documents/IronHack/Rewards-Program/rewards-program/src/components/purchaseMonth.js"],"names":["React","Component","RewardsCard","purchaseMonth","constructor","props","calculateRewards","purchased","totalRewards","getRewards1","getRewards2","console","log","totalRewards1","totalRewards2","state","transitionArr","transitions","monthListSum","totalRewardsMonth","render","transitionList","newtransArr","ntranstArr","map","trans","rewardpoints","purchase","month","eachTransition","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AACnDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,gBATmB,GASCC,SAAD,IAAe;AAChC,UAAIC,YAAY,GAAG,CAAnB,CADgC,CAEhC;;AACA,UAAG,KAAKD,SAAL,IAAkBA,SAAS,GAAG,GAAjC,EAAsC;AACpC,YAAIE,WAAW,GAAGF,SAAS,GAAG,EAA9B;AACAC,QAAAA,YAAY,IAAIC,WAAhB;AACD;;AACD,UAAG,KAAKF,SAAL,IAAkBA,SAAS,GAAG,GAAjC,EAAsC;AACpC,YAAIE,WAAW,GAAG,EAAlB;AACAD,QAAAA,YAAY,IAAIC,WAAhB;AACD;;AACD,UAAGF,SAAS,GAAG,GAAf,EAAoB;AAClB,YAAIG,WAAW,GAAG,CAACH,SAAS,GAAG,GAAb,IAAoB,CAAtC;AACAC,QAAAA,YAAY,IAAIE,WAAhB;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,aAA7B;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,aAA7B;AACA,aAAOD,aAAP;AACD,KA3BkB;;AAEf,SAAKE,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,KAAKX,KAAL,CAAWY,WADf;AAEXC,MAAAA,YAAY,EAAE,EAFH;AAGXC,MAAAA,iBAAiB,EAAE;AAHR,KAAb;AAKH;;AAsBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP,UAAMC,cAAc,GAAG,KAAKN,KAAL,CAAWC,aAAlC,CADO,CAEP;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIM,WAAW,GAAG,CAAC,GAAG,KAAKP,KAAL,CAAWC,aAAf,CAAlB;AACA,QAAIO,UAAU,GAAGD,WAAW,CAACE,GAAZ,CAAiBC,KAAD,IAAW;AAC1C,aAAO,EAAC,GAAGA,KAAJ;AAAWC,QAAAA,YAAY,EAAE,KAAKpB,gBAAL,CAAsBmB,KAAK,CAACE,QAA5B;AAAzB,OAAP;AACD,KAFgB,CAAjB,CAvBK,CA0BL;AACA;AACA;AACA;AACA;AACA;;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCW,UAAnC,EAhCK,CAiCP;AACA;;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAKG,KAAL,CAAWC,aAA7C;AAEA,wBACE;AAAA,8BACE;AAAA,kBAAK,KAAKX,KAAL,CAAWuB;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA,kBACCP,cAAc,CAACG,GAAf,CAAoBK,cAAD,iBAClB,eAAC,WAAD,OACIA,cADJ;AAEA,UAAA,GAAG,EAAEA,cAAc,CAACC,EAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AADD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAnGkD","sourcesContent":["import React, { Component } from 'react';\nimport RewardsCard from \"./RewardsCard\";\n\nexport default class purchaseMonth extends Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        transitionArr: this.props.transitions,\n        monthListSum: [],\n        totalRewardsMonth: 0\n    };\n  }\n\n  calculateRewards = (purchased) => {\n    let totalRewards = 0;\n    // let totalRewards2 = 0;\n    if(50 < purchased && purchased < 100) {\n      let getRewards1 = purchased - 50;\n      totalRewards += getRewards1;\n    }\n    if(50 < purchased && purchased > 100) {\n      let getRewards1 = 50;\n      totalRewards += getRewards1;\n    }\n    if(purchased > 100) {\n      let getRewards2 = (purchased - 100) * 2;\n      totalRewards += getRewards2;\n    }\n    console.log(\"totalRewards1\", totalRewards1);\n    console.log(\"totalRewards2\", totalRewards2);\n    return totalRewards1;\n  }\n\n  // renderRewardTransArr = () => {\n  //   // const total = transitions.reduce((sum, {purchased}) => {\n  //   //   let reward = calculateRewards(purchased);\n  //   //   return sum + reward;\n  //   // }, 0);\n  //   let newtransArr = [...this.state.transitionArr];\n  //      let ntranstArr = newtransArr.map((trans, index) => {\n  //       return {...trans, rewardpoints: this.calculateRewards(trans.purchased)}\n  //      })\n  //   // this.setState(prevState => ({\n  //   //   transitionArr: [...prevState.transitionArr, newtransArr]\n  //   // }));\n  //   this.setState({\n  //     transitionArr: ntranstArr\n  //   });\n  //   console.log(\"new Transition Arr2\", ntranstArr);\n  // }\n\n  render() {\n    const transitionList = this.state.transitionArr;\n    // renderRewardTransArr = () => {\n      // const total = transitions.reduce((sum, {purchased}) => {\n      //   let reward = calculateRewards(purchased);\n      //   return sum + reward;\n      // }, 0);\n      // calculateRewards = (purchased) => {\n      //   let purchasedT = purchased;\n      //   let totalRewards = 0\n      //   if(50 < purchasedT && purchasedT < 100) {\n      //     let getRewards1 = purchasedT - 50;\n      //     totalRewards += getRewards1;\n      //   }\n      //   if(purchasedT > 100) {\n      //     let getRewards2 = (purchasedT - 100) * 2;\n      //     totalRewards += getRewards2;\n      //   }\n      //   console.log(\"totalRewards\", totalRewards);\n      //   return totalRewards;\n      // }\n\n      let newtransArr = [...this.state.transitionArr];\n      let ntranstArr = newtransArr.map((trans) => {\n        return {...trans, rewardpoints: this.calculateRewards(trans.purchase)}\n      })\n      // this.setState(prevState => ({\n      //   transitionArr: [...prevState.transitionArr, newtransArr]\n      // }));\n      // this.setState({\n      //   transitionArr: ntranstArr\n      // });\n      console.log(\"new Transition Arr2\", ntranstArr);\n    // }\n    // {renderRewardTransArr()}\n    console.log(\"new Transition Arr\", this.state.transitionArr);\n\n    return (\n      <div>\n        <h2>{this.props.month}</h2>\n        {/* <h3>{this.renderRewardTransArr()}</h3> */}\n        <div>\n        {transitionList.map((eachTransition) => (\n          <RewardsCard\n          {...eachTransition}\n          key={eachTransition.id}\n          />\n        ))}\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}